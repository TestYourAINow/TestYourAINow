import { NextRequest, NextResponse } from "next/server";
import { connectToDatabase } from "@/lib/db";
import { Agent } from "@/models/Agent";
import { AgentKnowledge } from "@/models/AgentKnowledge";
import { Demo } from "@/models/Demo";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/authOptions";
import { createAgentOpenAI, createAgentOpenAIForWebhook } from "@/lib/openai";

type IntegrationFile = { name: string; size: number; path: string; url: string };
type ChatMessage = { role: "user" | "assistant" | "system"; content: string };

// üÜï Interface pour typer le Demo
interface DemoDocument {
  _id: string;
  userId: string;
  name: string;
  agentId: string;
  demoToken: string;
  publicEnabled: boolean;
  // ... autres champs si n√©cessaire
}

// üÜï FONCTION HELPER POUR LA DATE LOCALIS√âE
function getLocalizedDateTime(timezone: string): string {
  const now = new Date();
  
  try {
    // Essayer de formater avec la timezone de l'utilisateur
    const localTime = now.toLocaleString('fr-FR', { 
      timeZone: timezone,
      year: 'numeric',
      month: 'long', 
      day: 'numeric',
      weekday: 'long',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    });
    
    // Obtenir le nom de la timezone en fran√ßais
    const timeZoneName = Intl.DateTimeFormat('fr', { timeZone: timezone, timeZoneName: 'long' })
      .formatToParts(now)
      .find(part => part.type === 'timeZoneName')?.value || timezone;
    
    return `${localTime} (${timeZoneName})`;
  } catch (error) {
    // Si la timezone n'est pas valide, utiliser UTC
    console.warn('Timezone invalide:', timezone, 'Utilisation UTC');
    return `${now.toISOString().replace('T', ' ').replace('Z', '')} (UTC)`;
  }
}

// üÜï NOUVELLE FONCTION : G√©rer les int√©grations Calendly
async function handleCalendlyIntegration(
  userMessage: string, 
  integrations: any[], 
  openai: any
): Promise<string | null> {
  const calendlyIntegrations = integrations.filter(i => i.type === "calendly");
  
  if (calendlyIntegrations.length === 0) return null;
  
  // D√©tecter si l'utilisateur demande un rendez-vous
  const appointmentKeywords = [
    'rendez-vous', 'rdv', 'rencontrer', 'r√©union', 'meeting', 
    'planifier', 'r√©server', 'disponibilit√©', 'horaire', 
    'calendrier', 'appointment', 'schedule', 'book', 'booking',
    'prendre rendez-vous', 'fixer un rdv', 'voir ensemble'
  ];
  
  const hasAppointmentRequest = appointmentKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );
  
  if (!hasAppointmentRequest) return null;
  
  console.log('üóìÔ∏è Demande de rendez-vous d√©tect√©e, int√©gration Calendly...');
  
  for (const integration of calendlyIntegrations) {
    if (!integration.apiKey) {
      console.log(`‚ùå Pas d'API key pour l'int√©gration ${integration.name}`);
      continue;
    }
    
    try {
      // 1. R√©cup√©rer les informations utilisateur Calendly
      const userRes = await fetch('https://api.calendly.com/users/me', {
        headers: {
          'Authorization': `Bearer ${integration.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!userRes.ok) {
        console.log(`‚ùå Erreur API Calendly user (${userRes.status}):`, await userRes.text());
        continue;
      }
      
      const userData = await userRes.json();
      const userUri = userData.resource.uri;
      
      console.log('‚úÖ Utilisateur Calendly r√©cup√©r√©:', userData.resource.name);
      
      // 2. R√©cup√©rer les types d'√©v√©nements
      const eventsRes = await fetch(`https://api.calendly.com/event_types?user=${userUri}&active=true`, {
        headers: {
          'Authorization': `Bearer ${integration.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!eventsRes.ok) {
        console.log(`‚ùå Erreur API Calendly events (${eventsRes.status}):`, await eventsRes.text());
        continue;
      }
      
      const eventsData = await eventsRes.json();
      const eventTypes = eventsData.collection || [];
      
      console.log(`üìÖ ${eventTypes.length} types d'√©v√©nements trouv√©s`);
      
      if (eventTypes.length === 0) {
        return `‚ùå Aucun type d'√©v√©nement actif trouv√© sur Calendly pour ${integration.name}. Veuillez configurer vos √©v√©nements sur Calendly.`;
      }
      
      // 3. Prendre le premier type d'√©v√©nement disponible
      const firstEvent = eventTypes[0];
      const schedulingUrl = firstEvent.scheduling_url;
      
      console.log('üîó URL de planification:', schedulingUrl);
      
      // 4. Utiliser l'IA pour g√©n√©rer une r√©ponse personnalis√©e
      const aiRes = await openai.chat.completions.create({
        model: 'gpt-4o',
        temperature: 0.3,
        messages: [
          {
            role: 'system',
            content: `Tu es un assistant qui aide √† planifier des rendez-vous. L'utilisateur vient de demander un rendez-vous. Tu as acc√®s √† Calendly avec le lien : ${schedulingUrl}

R√©ponds de mani√®re naturelle, chaleureuse et professionnelle en proposant ce lien pour r√©server. 

Instructions importantes :
- Sois enthousiaste mais professionnel
- Explique bri√®vement que le lien m√®ne √† un calendrier de r√©servation
- Encourage l'action
- Garde un ton personnalis√© et humain
- Ne mentionne pas les d√©tails techniques de Calendly`
          },
          {
            role: 'user',
            content: userMessage
          }
        ]
      });
      
      const aiResponse = aiRes.choices[0]?.message?.content || '';
      
      // 5. Construire la r√©ponse finale avec le lien
      const finalResponse = `${aiResponse}\n\nüóìÔ∏è **R√©servez votre cr√©neau ici :** ${schedulingUrl}`;
      
      console.log('‚úÖ R√©ponse Calendly g√©n√©r√©e avec succ√®s');
      return finalResponse;
      
    } catch (error) {
      console.error('‚ùå Erreur Calendly pour', integration.name, ':', error);
      continue;
    }
  }
  
  // Si aucune int√©gration n'a fonctionn√©
  return `Je serais ravi de planifier un rendez-vous avec vous ! Malheureusement, il semble y avoir un probl√®me temporaire avec mon syst√®me de r√©servation. Pouvez-vous me contacter directement pour que nous puissions organiser notre rencontre ?`;
}

// üÜï NOUVELLE FONCTION : G√©rer les int√©grations Google Calendar
async function handleGoogleCalendarIntegration(
  userMessage: string,
  integrations: any[],
  openai: any,
  userTimezone: string
): Promise<string | null> {
  const googleCalendarIntegrations = integrations.filter(i => i.type === "google_calendar");
  
  if (googleCalendarIntegrations.length === 0) return null;
  
  // D√©tecter si l'utilisateur demande un rendez-vous avec date/heure sp√©cifique
  const timeIndicators = [
    'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche', 'lundi',
    'demain', 'apr√®s-midi', 'matin', 'soir', 'dans', 'h', 'heure', '14h', '15h', '16h',
    '√†', 'le', 'prochain', 'prochaine', 'semaine', 'aujourd\'hui', ':', 'h00', 'h30'
  ];
  
  const appointmentKeywords = [
    'rendez-vous', 'rdv', 'rencontrer', 'r√©union', 'meeting', 
    'planifier', 'r√©server', 'booker', 'cr√©er', 'fixer'
  ];
  
  const hasTimeIndicator = timeIndicators.some(indicator => 
    userMessage.toLowerCase().includes(indicator)
  );
  
  const hasAppointmentKeyword = appointmentKeywords.some(keyword => 
    userMessage.toLowerCase().includes(keyword)
  );
  
  // Seulement d√©clencher si on a √† la fois un mot-cl√© de RDV ET un indicateur temporel
  if (!hasTimeIndicator || !hasAppointmentKeyword) return null;
  
  console.log('üóìÔ∏è Demande de cr√©ation Google Calendar d√©tect√©e...');
  
  for (const integration of googleCalendarIntegrations) {
    if (!integration.accessToken) {
      console.log(`‚ùå Pas d'access token pour ${integration.name}`);
      continue;
    }
    
    try {
      // 1. Demander √† l'IA d'extraire les informations temporelles
      const extractionRes = await openai.chat.completions.create({
        model: 'gpt-4o',
        temperature: 0.1,
        messages: [
          {
            role: 'system',
            content: `Tu es un assistant sp√©cialis√© dans l'extraction d'informations temporelles. 

Date et heure actuelles: ${new Date().toLocaleString('fr-FR', { 
              timeZone: userTimezone,
              year: 'numeric',
              month: 'long', 
              day: 'numeric',
              weekday: 'long',
              hour: '2-digit',
              minute: '2-digit'
            })} (${userTimezone})

√Ä partir du message utilisateur, extrait les informations de rendez-vous et r√©ponds UNIQUEMENT en JSON:

{
  "hasAppointment": true/false,
  "datetime": "2025-08-25T14:00:00", // Format ISO, timezone utilisateur
  "duration": 60, // en minutes
  "title": "Titre du rendez-vous",
  "email": "email@exemple.com" // si mentionn√©, sinon null
}

Si les informations sont incompl√®tes ou ambigu√´s, retourne "hasAppointment": false.`
          },
          {
            role: 'user',
            content: userMessage
          }
        ]
      });
      
      const extractedInfo = JSON.parse(extractionRes.choices[0]?.message?.content || '{"hasAppointment": false}');
      
      if (!extractedInfo.hasAppointment) {
        console.log('‚ùå Informations temporelles insuffisantes');
        continue;
      }
      
      console.log('‚úÖ Informations extraites:', extractedInfo);
      
      // 2. Cr√©er l'√©v√©nement Google Calendar
      const startDateTime = new Date(extractedInfo.datetime);
      const endDateTime = new Date(startDateTime.getTime() + (extractedInfo.duration * 60000));
      
      const calendarEvent = {
        summary: extractedInfo.title || 'Rendez-vous',
        start: {
          dateTime: startDateTime.toISOString(),
          timeZone: userTimezone
        },
        end: {
          dateTime: endDateTime.toISOString(),
          timeZone: userTimezone
        },
        attendees: extractedInfo.email ? [{ email: extractedInfo.email }] : undefined,
        description: `Rendez-vous cr√©√© automatiquement via l'assistant IA`
      };
      
      const createEventRes = await fetch(`https://www.googleapis.com/calendar/v3/calendars/${integration.calendarId || 'primary'}/events`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${integration.accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(calendarEvent)
      });
      
      if (!createEventRes.ok) {
        const errorData = await createEventRes.text();
        console.error('‚ùå Erreur cr√©ation Google Calendar:', errorData);
        continue;
      }
      
      const createdEvent = await createEventRes.json();
      console.log('‚úÖ √âv√©nement cr√©√©:', createdEvent.id);
      
      // 3. G√©n√©rer une r√©ponse personnalis√©e
      const confirmationRes = await openai.chat.completions.create({
        model: 'gpt-4o',
        temperature: 0.3,
        messages: [
          {
            role: 'system',
            content: `Tu es un assistant qui confirme la cr√©ation d'un rendez-vous Google Calendar.

L'√©v√©nement a √©t√© cr√©√© avec succ√®s avec ces d√©tails :
- Titre: ${extractedInfo.title}
- Date: ${startDateTime.toLocaleDateString('fr-FR', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              timeZone: userTimezone
            })}
- Heure: ${startDateTime.toLocaleTimeString('fr-FR', { 
              hour: '2-digit', 
              minute: '2-digit',
              timeZone: userTimezone
            })} - ${endDateTime.toLocaleTimeString('fr-FR', { 
              hour: '2-digit', 
              minute: '2-digit',
              timeZone: userTimezone
            })}
- Dur√©e: ${extractedInfo.duration} minutes

R√©ponds de mani√®re chaleureuse et professionnelle pour confirmer la cr√©ation. Inclus les d√©tails importants et rassure l'utilisateur.`
          },
          {
            role: 'user',
            content: userMessage
          }
        ]
      });
      
      const confirmationMessage = confirmationRes.choices[0]?.message?.content || '';
      
      const finalResponse = `${confirmationMessage}\n\n‚úÖ **√âv√©nement cr√©√© dans Google Calendar**\nüìÖ Lien: ${createdEvent.htmlLink}`;
      
      console.log('‚úÖ R√©ponse Google Calendar g√©n√©r√©e avec succ√®s');
      return finalResponse;
      
    } catch (error) {
      console.error('‚ùå Erreur Google Calendar pour', integration.name, ':', error);
      continue;
    }
  }
  
  // Si aucune int√©gration n'a fonctionn√©
  return `Je serais ravi de cr√©er ce rendez-vous pour vous ! Malheureusement, il semble y avoir un probl√®me temporaire avec mon int√©gration Google Calendar. Pouvez-vous me redonner les d√©tails du rendez-vous que nous pourrons organiser manuellement ?`;
}

export async function POST(req: NextRequest, context: any) {
  try {
    // R√©cup√©rer les param√®tres
    const params = await context.params;
    const { id } = params;
    
    await connectToDatabase();

    // üÜï √âTAPE 1: V√©rifier si c'est un appel public (demo ou widget)
    const publicKind = req.headers.get('x-public-kind');
    const demoId = req.headers.get('x-demo-id');
    const demoToken = req.headers.get('x-demo-token');
    const widgetId = req.headers.get('x-widget-id');
    const widgetToken = req.headers.get('x-widget-token');
    
    let isPublicOK = false;
    let session = null;

    if (publicKind === 'demo' && demoId && demoToken) {
      // Mode public DEMO : valider le token de la d√©mo
      console.log('üîì Mode public DEMO d√©tect√©, validation du token...');
      
      const demo = await Demo.findById(demoId).lean() as DemoDocument | null;
      
      if (demo && demo.demoToken === demoToken && demo.publicEnabled) {
        isPublicOK = true;
        console.log('‚úÖ Token d√©mo valide, acc√®s public autoris√©');
      } else {
        console.log('‚ùå Token d√©mo invalide ou d√©mo d√©sactiv√©e');
        return NextResponse.json({ error: "Invalid demo token" }, { status: 401 });
      }
    } else if (publicKind === 'widget' && widgetId && widgetToken === 'public') {
      // Mode public WIDGET : validation simplifi√©e
      console.log('üîì Mode public WIDGET d√©tect√©, validation...');
      
      // Pour l'instant, on accepte tous les widgets avec token "public"
      // Plus tard, on pourra ajouter une validation plus stricte
      isPublicOK = true;
      console.log('‚úÖ Widget public autoris√©');
    } else {
      // Mode priv√© : v√©rifier la session
      session = await getServerSession(authOptions);
      if (!session || !session.user?.email || !session.user?.id) {
        return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
      }
    }

    const body = await req.json();
    const userMessage: string = body.message;
    const previousMessages: ChatMessage[] = body.previousMessages || [];
    const welcomeMessage: string | null = body.welcomeMessage || null;
    const userTimezone: string = body.timezone || 'UTC'; // üÜï NOUVEAU

    if (!userMessage || typeof userMessage !== "string") {
      return NextResponse.json({ error: "Message is required." }, { status: 400 });
    }

    // üÜï √âTAPE 2: R√©cup√©rer l'agent selon le mode (public ou priv√©)
    let agent;
    
    if (isPublicOK) {
      // Mode public : r√©cup√©rer l'agent sans v√©rifier le userId
      agent = await Agent.findOne({ _id: id });
      console.log('üîì Agent r√©cup√©r√© en mode public:', !!agent, `(${publicKind})`);
    } else {
      // Mode priv√© : r√©cup√©rer l'agent avec v√©rification du userId
      // ‚úÖ Fix TypeScript : v√©rifier que session n'est pas null
      if (!session?.user?.id) {
        return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
      }
      agent = await Agent.findOne({ _id: id, userId: session.user.id });
    }

    if (!agent) {
      return NextResponse.json({ error: "Agent not found." }, { status: 404 });
    }

    // üÜï √âTAPE 3: Cr√©er l'instance OpenAI selon le mode
    let openaiResult;
    
    if (isPublicOK) {
      // Mode public : utiliser la fonction webhook (sans session)
      console.log(`üîì Cr√©ation OpenAI en mode public (${publicKind})...`);
      openaiResult = await createAgentOpenAIForWebhook(agent);
    } else {
      // Mode priv√© : utiliser la fonction normale (avec session)
      openaiResult = await createAgentOpenAI(agent);
    }

    // G√©rer les erreurs OpenAI
    if (!openaiResult.openai) {
      console.error('‚ùå Erreur cr√©ation OpenAI:', openaiResult.error);
      
      if (isPublicOK) {
        return NextResponse.json(
          { error: `Mode public: ${openaiResult.error}` },
          { status: 400 }
        );
      } else {
        return NextResponse.json(
          { error: "Unauthorized" },
          { status: 401 }
        );
      }
    }

    const openai = openaiResult.openai;
    console.log('‚úÖ Instance OpenAI cr√©√©e avec succ√®s');

    // üÜï V√âRIFIER SI C'EST UNE DEMANDE DE CR√âATION GOOGLE CALENDAR
    const googleCalendarResponse = await handleGoogleCalendarIntegration(
      userMessage, 
      agent.integrations || [], 
      openai,
      userTimezone
    );

    if (googleCalendarResponse) {
      console.log('‚úÖ R√©ponse Google Calendar g√©n√©r√©e');
      return NextResponse.json({ reply: googleCalendarResponse });
    }

    // üÜï V√âRIFIER SI C'EST UNE DEMANDE DE RENDEZ-VOUS CALENDLY
    const calendlyResponse = await handleCalendlyIntegration(
      userMessage, 
      agent.integrations || [], 
      openai
    );

    if (calendlyResponse) {
      console.log('‚úÖ R√©ponse Calendly g√©n√©r√©e');
      return NextResponse.json({ reply: calendlyResponse });
    }

    // Le reste du code reste identique...
    // Connaissances internes (fichiers) - LIMITE INTELLIGENTE
    const knowledge = await AgentKnowledge.find({ agentId: id }).sort({ createdAt: -1 });
    
    const MAX_CONTENT_PER_FILE = 15000;
    const MAX_TOTAL_KNOWLEDGE = 80000;
    
    console.log(`üìö Found ${knowledge.length} knowledge entries for agent ${id}`);
    
    let totalUsedChars = 0;
    const knowledgeText = knowledge
      .map((k) => {
        if (totalUsedChars >= MAX_TOTAL_KNOWLEDGE) {
          return null;
        }
        
        const remainingChars = MAX_TOTAL_KNOWLEDGE - totalUsedChars;
        const maxForThisFile = Math.min(MAX_CONTENT_PER_FILE, remainingChars);
        
        let content = k.content;
        let truncated = false;
        
        if (content.length > maxForThisFile) {
          content = content.slice(0, maxForThisFile);
          truncated = true;
        }
        
        totalUsedChars += content.length;
        
        const header = `‚Äî ${k.fileName} (${k.sourceName || 'Document'}) :`;
        const footer = truncated ? "\n... [document tronqu√© pour rester dans les limites]" : "";
        
        return `${header}\n${content}${footer}\n`;
      })
      .filter(Boolean)
      .join("\n");
    
    console.log(`üìä Knowledge summary: ${totalUsedChars} chars used, ${knowledge.length} files processed`);

    // Int√©grations
    const integrationsText = (agent.integrations || [])
      .map((i: any) => {
        if (i.type === "webhook") {
          return `Webhook "${i.name}": ${i.url}`;
        } else if (i.type === "calendly") {
          return `Calendly "${i.name}": ${i.url}`;
        } else if (i.type === "google_calendar") {
          return `Google Calendar "${i.name}": Calendrier connect√©`;
        } else if (i.type === "files" && Array.isArray(i.files)) {
          const fileList = (i.files as IntegrationFile[]).map((f) => `- ${f.name}`).join("\n");
          return `Files "${i.name}":\n${fileList}`;
        }
        return "";
      })
      .filter(Boolean)
      .join("\n\n");

    // üÜï OBTENIR LA DATE LOCALIS√âE
    const currentDateTime = getLocalizedDateTime(userTimezone);

    // Construction du message avec m√©moire
    const messages: ChatMessage[] = [
      { role: "system", content: agent.finalPrompt || "" },
      { role: "system", content: `Voici ce que tu dois savoir :\n${knowledgeText}` },
      { 
        role: "system", 
        content: `DATE ET HEURE ACTUELLES: ${currentDateTime}. Utilise cette information pour toute question relative au temps, aux dates, ou √† la planification. L'utilisateur est dans cette timezone.` 
      },
    ];

    if (integrationsText) {
      messages.push({ role: "system", content: `Voici aussi les int√©grations disponibles :\n${integrationsText}` });
    }

    if (typeof welcomeMessage === "string" && welcomeMessage.trim().length > 0) {
      messages.push({ role: "assistant", content: welcomeMessage.trim() });
    }

    messages.push(...previousMessages);
    messages.push({ role: "user", content: userMessage });

    // Appel OpenAI
    const completion = await openai.chat.completions.create({
      model: agent.openaiModel,
      temperature: agent.temperature,
      top_p: agent.top_p,
      messages,
    });

    const reply = completion.choices[0]?.message?.content || "Je n'ai pas pu r√©pondre.";
    return NextResponse.json({ reply });
    
  } catch (error: any) {
    console.error("Agent ask error:", error);
    
    if (error.status === 401) {
      return NextResponse.json(
        { error: "Invalid OpenAI API key. Please check your API key in settings." },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: "Something went wrong while processing your request." },
      { status: 500 }
    );
  }
}