import { NextRequest, NextResponse } from 'next/server';
import { getAIResponse, listPendingAIResponses } from '@/lib/redisCache'; // üöÄ Redis Pro

// üîÑ POST - R√©cup√©rer la r√©ponse (2√®me External Request)
export async function POST(req: NextRequest, context: any) {
  try {
    const params = await context.params;
    const { webhookId } = params;
    
    console.log(`üîç FETCHRESPONSE POST for ID: ${webhookId}`);
    console.log(`üîó Full URL: ${req.url}`);
    
    // 1. R√©cup√©rer et parser le body
    const body = await req.text();
    const data = JSON.parse(body);
    
    console.log(`üìÑ Fetchresponse data:`, JSON.stringify(data, null, 2));

    // 2. Extraire contactId du body (votre format)
    const userId = data.contactId || data.user_id || data.subscriber_id || 'anonymous';
    const conversationId = `${webhookId}_${userId}`;

    console.log(`üîç Fetching response for ${conversationId}`);
    console.log(`üìã Available responses:`, await listPendingAIResponses());

    // 3. üöÄ Utiliser Redis Pro
    const aiResponse = await getAIResponse(conversationId);
    console.log(`üéØ Found response:`, aiResponse ? 'YES' : 'NO');
    
    if (aiResponse) {
      console.log(`‚úÖ Response found and returned for ${conversationId}: "${aiResponse.substring(0, 100)}..."`);
      
      return NextResponse.json({
        text: aiResponse,
        success: true,
        response: aiResponse,
        status: "completed"
      });
    } else {
      // üöÄ RETRY LOGIC avec Redis
      console.log(`‚è≥ Response not ready yet for ${conversationId}, checking if OpenAI is still processing...`);
      
      // Attendre 3 secondes et re-checker une fois
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const aiResponseRetry = await getAIResponse(conversationId);
      if (aiResponseRetry) {
        console.log(`‚úÖ Response found on retry for ${conversationId}: "${aiResponseRetry.substring(0, 100)}..."`);
        
        return NextResponse.json({
          text: aiResponseRetry,
          success: true,
          response: aiResponseRetry,
          status: "completed"
        });
      }
      
      // Toujours pas pr√™t apr√®s retry
      return NextResponse.json({
        text: "Je traite votre message, un instant s'il vous pla√Æt...",
        success: false,
        pending: true,
        status: "processing"
      });
    }

  } catch (error) {
    console.error('‚ùå Fetchresponse error:', error);
    return NextResponse.json({
      text: "D√©sol√©, une erreur est survenue.",
      success: false
    });
  }
}

// üîÑ GET - Compatibilit√©
export async function GET(req: NextRequest, context: any) {
  // Rediriger vers POST
  return POST(req, context);
}