import { NextResponse } from "next/server";
import { createUserOpenAI } from "@/lib/openai";

export async function POST(req: Request) {
  try {
    const { openai, error } = await createUserOpenAI();
    
    if (!openai) {
      return NextResponse.json({ error }, { status: error === "Unauthorized" ? 401 : 400 });
    }

    const body = await req.json();
    const { name, description } = body;

    if (!name || !description) {
      return NextResponse.json({ error: "Missing fields." }, { status: 400 });
    }

    const safeName = name.trim();

    const prompt = `
Tu es un expert en prompt engineering. G√©n√®re des instructions D√âTAILL√âES pour une int√©gration Calendly.

Informations de l'int√©gration :
- Nom: ${safeName}
- Description: ${description.trim()}

R√©ponds UNIQUEMENT avec ce format markdown :

\`\`\`markdown
### ${safeName} Integration

${description.trim()}

#### D√©clenchement automatique
Tu dois proposer un rendez-vous Calendly quand l'utilisateur :
- Demande un rendez-vous, RDV, meeting, r√©union
- Veut te rencontrer, planifier quelque chose
- Demande tes disponibilit√©s ou ton horaire
- Utilise des mots comme "r√©server", "booker", "scheduler"
- Pose des questions sur ton calendrier
- Exprime un int√©r√™t pour tes services et semble pr√™t √† passer √† l'action

#### R√©ponse type
Quand tu d√©tectes une demande de rendez-vous :
1. R√©ponds de mani√®re chaleureuse et personnalis√©e
2. Explique bri√®vement le processus de r√©servation
3. Propose le lien Calendly de mani√®re claire et engageante
4. Encourage l'action sans √™tre pressant
5. Assure-toi que le lien sera fonctionnel et accessible

#### Exemple de r√©ponse
"Je serais ravi(e) de vous rencontrer ! üìÖ Je peux vous aider √† r√©server un cr√©neau qui vous convient parfaitement. Cliquez sur le lien ci-dessous pour voir mes disponibilit√©s en temps r√©el et choisir le moment qui vous arrange le mieux. La r√©servation ne prend que quelques secondes !"

#### Informations importantes
- L'int√©gration Calendly est active et fonctionnelle
- Les liens de r√©servation sont g√©n√©r√©s automatiquement via l'API Calendly
- Tu n'as pas besoin de demander l'email ou le nom (Calendly s'en occupe lors de la r√©servation)
- Sois proactif : si quelqu'un semble int√©ress√© par tes services, propose spontan√©ment un rendez-vous
- Le syst√®me d√©tecte automatiquement les demandes de rendez-vous et g√©n√®re des vrais liens Calendly
- Chaque lien m√®ne directement au calendrier de r√©servation de l'utilisateur

#### Limitations et alternatives
- Ne propose pas de dates/heures sp√©cifiques (laisse Calendly g√©rer les cr√©neaux disponibles)
- Ne demande pas les d√©tails de contact (Calendly collecte ces informations)
- Si l'int√©gration ne fonctionne pas temporairement, explique poliment et propose une alternative de contact
- Reste toujours positif et solution-oriented m√™me en cas de probl√®me technique

#### Bonnes pratiques
- Utilise un langage naturel et engageant
- √âvite le jargon technique
- Personnalise tes r√©ponses selon le contexte de la conversation
- N'h√©site pas √† expliquer bri√®vement les avantages du rendez-vous
- Maintiens un ton professionnel mais accessible
\`\`\`
`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "Tu es un assistant expert en prompt engineering pour les int√©grations Calendly." },
        { role: "user", content: prompt },
      ],
      temperature: 0.5,
    });

    const result = completion.choices[0].message.content;
    return NextResponse.json({ instructions: result });
  } catch (error: any) {
    console.error("[GENERATE_CALENDLY_INSTRUCTIONS]", error);
    
    if (error.status === 401) {
      return NextResponse.json(
        { error: "Invalid OpenAI API key. Please check your API key in settings." },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: "Failed to generate Calendly instructions" },
      { status: 500 }
    );
  }
}