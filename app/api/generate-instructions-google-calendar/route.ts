import { NextResponse } from "next/server";
import { createUserOpenAI } from "@/lib/openai";

export async function POST(req: Request) {
  try {
    const { openai, error } = await createUserOpenAI();
    
    if (!openai) {
      return NextResponse.json({ error }, { status: error === "Unauthorized" ? 401 : 400 });
    }

    const body = await req.json();
    const { name, description } = body;

    if (!name || !description) {
      return NextResponse.json({ error: "Missing fields." }, { status: 400 });
    }

    const safeName = name.trim();

    const prompt = `
Tu es un expert en prompt engineering. G√©n√®re des instructions D√âTAILL√âES pour une int√©gration Google Calendar.

Informations de l'int√©gration :
- Nom: ${safeName}
- Description: ${description.trim()}

R√©ponds UNIQUEMENT avec ce format markdown :

\`\`\`markdown
### ${safeName} Integration

${description.trim()}

#### D√©clenchement automatique
Tu dois cr√©er un rendez-vous Google Calendar quand l'utilisateur :
- Demande un rendez-vous avec une date/heure sp√©cifique ("mardi √† 14h", "vendredi matin", "demain 16h30")
- Utilise des expressions temporelles ("dans 3 jours", "la semaine prochaine", "cet apr√®s-midi")
- Confirme une disponibilit√© ("oui √ßa me va pour jeudi 10h")
- Exprime un besoin de planification avec d√©tails temporels

#### Informations requises pour cr√©er l'√©v√©nement
Avant de cr√©er l'√©v√©nement, assure-toi d'avoir :
1. **Date et heure** : Pr√©cise (ex: "mardi 25 ao√ªt 2025 √† 14h00")
2. **Dur√©e** : Par d√©faut 1 heure, ou selon le contexte
3. **Titre** : G√©n√®re un titre appropri√© (ex: "Rendez-vous avec [Client]")
4. **Email invit√©** : Si mentionn√©, sinon optionnel

#### R√©ponse apr√®s cr√©ation
Quand tu cr√©es avec succ√®s un rendez-vous :
1. Confirme les d√©tails (date, heure, dur√©e)
2. Mentionne que l'invitation sera envoy√©e par email (si applicable)
3. Propose des alternatives si le cr√©neau n'est pas libre
4. Donne les informations de modification/annulation

#### Exemple de r√©ponse
"Parfait ! J'ai cr√©√© votre rendez-vous pour mardi 25 ao√ªt 2025 √† 14h00 (dur√©e : 1 heure). ‚úÖ 

üìÖ **D√©tails :**
- Date : Mardi 25 ao√ªt 2025
- Heure : 14h00 - 15h00 
- Titre : Rendez-vous consultation

L'√©v√©nement a √©t√© ajout√© √† votre Google Calendar. Si vous avez fourni un email, une invitation sera envoy√©e automatiquement."

#### Gestion des erreurs et cas sp√©ciaux
- **Date ambigu√´** : Demande clarification ("Quel mardi pr√©cis√©ment ?")
- **Conflit d'horaire** : Propose alternatives proches
- **Timezone** : Utilise la timezone de l'utilisateur automatiquement
- **Erreur technique** : Explique poliment et propose de r√©essayer

#### Bonnes pratiques
- Confirme toujours les d√©tails avant cr√©ation
- Utilise un langage naturel et rassurant
- Sois pr√©cis sur les horaires (format 24h en interne, format naturel pour l'utilisateur)
- Propose toujours une assistance pour modifications
- Respecte la timezone de l'utilisateur

#### Limitations
- Ne peux pas voir le calendrier existant (conflits possibles)
- Les invitations d√©pendent des param√®tres Google Calendar de l'utilisateur
- Modification des √©v√©nements existants n√©cessite des informations sp√©cifiques
\`\`\`
`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "Tu es un assistant expert en prompt engineering pour les int√©grations Google Calendar." },
        { role: "user", content: prompt },
      ],
      temperature: 0.5,
    });

    const result = completion.choices[0].message.content;
    return NextResponse.json({ instructions: result });
  } catch (error: any) {
    console.error("[GENERATE_GOOGLE_CALENDAR_INSTRUCTIONS]", error);
    
    if (error.status === 401) {
      return NextResponse.json(
        { error: "Invalid OpenAI API key. Please check your API key in settings." },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: "Failed to generate Google Calendar instructions" },
      { status: 500 }
    );
  }
}